<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on namkyujin.com</title><link>https://iamkyu.github.io/tags/git/</link><description>Recent content in git on namkyujin.com</description><generator>Hugo -- gohugo.io</generator><language>ko-KR</language><lastBuildDate>Sat, 24 Sep 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://iamkyu.github.io/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>GIT 더 꼼꼼하게 커밋하기</title><link>https://iamkyu.github.io/post/20160924-git-patchmode-and-verbose/</link><pubDate>Sat, 24 Sep 2016 00:00:00 +0000</pubDate><guid>https://iamkyu.github.io/post/20160924-git-patchmode-and-verbose/</guid><description>GIT 더 꼼꼼하게 커밋하기 어쪄면 코드(Code)를 다루는 작업은 fetch로 시작해서 commit으로 끝난다. 버전관리시스템을 통해 여러명의 팀원이 협업을 한다면 아침에 출근해서 원격저장소와 소스코드의 버전(Sync)을 맞추고 작업을 진행한다. 그리고 내 작업량을 모두 해치우고 커밋을 하고 나서야 한숨 돌릴 수 있다.
Git에서는 로컬 저장소에 소스코드를 올리는 일을 Commit, 받는 일을 Fetch 라고 하고 원격 저장소에 올리는 일은 Push 받는 일은 Pull 라고 하지만, 편의상 이 글에서는 Commit 과 Fetch 라는 용어만 사용한다.</description></item><item><title>GIT 여러 커밋을 하나로 합치기</title><link>https://iamkyu.github.io/post/20160820-git-commit-merge/</link><pubDate>Sat, 20 Aug 2016 00:00:00 +0000</pubDate><guid>https://iamkyu.github.io/post/20160820-git-commit-merge/</guid><description>GIT 여러 commit을 하나로 합치기 버전 관리 시스템은 변경 내역을 기록하고 보관 하기 위해 사용하는 만큼 이력들(commit log)를 잘 관리하는 것이 중요하다. 이를 위해서는 은근히 신경 써야 할 것 들이 많은데
좋은 커밋 메시지를 작성한다. 일련된 작업 단위의 커밋 커밋 전략, 브런치 전략 등등 회사에서는 SVN을 사용하고 개인 작업용으로는 주로 Git을 사용했는데 최근 스터디 모임등으로 인해 Git으로 협업을 하게 되었다. 따라서 혼자 브런치를 가르고 합치는 등의 방법을 연습하고 있는데 아주 재미있다.</description></item></channel></rss>